# Generated by Django 3.1.1 on 2020-09-13 19:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('entry_date', models.DateField(auto_now_add=True)),
                ('description', models.CharField(max_length=255)),
                ('total_quota', models.PositiveIntegerField(default=0)),
                ('total_hours_analysed', models.PositiveIntegerField(default=0)),
                ('ceretai_user', models.BooleanField(default=False)),
                ('test_user', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('current_quota', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entries',
            fields=[
                ('video_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('external_id', models.PositiveIntegerField(unique=True)),
                ('entry_date', models.DateField(auto_now_add=True)),
                ('project', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('source_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('contract_type', models.CharField(choices=[('strict', 'strict'), ('public', 'public')], default='strict', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SpeechTimeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_length', models.PositiveIntegerField()),
                ('total_speech', models.PositiveIntegerField()),
                ('speech_f', models.PositiveIntegerField()),
                ('speech_m', models.PositiveIntegerField()),
                ('timeline', models.CharField(max_length=255)),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='ScreenTimeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_f', models.TextField()),
                ('screen_m', models.TextField()),
                ('images_with_faces', models.PositiveIntegerField()),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release_date', models.DateField()),
                ('producer', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=255)),
                ('language', models.CharField(max_length=255)),
                ('imdb_id', models.PositiveIntegerField()),
                ('genre', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('gender_director', models.CharField(max_length=255)),
                ('public', models.BooleanField(default=False)),
                ('source_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.source')),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='Pose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pitch_f', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('roll_f', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('yaw_f', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('pitch_m', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('roll_m', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('yaw_m', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='Keywords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_20_nouns_f', models.TextField()),
                ('nouns_frequency_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('top_20_nouns_m', models.TextField()),
                ('nouns_frequency_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('top_20_verbs_f', models.TextField()),
                ('verbs_frequency_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('top_20_verbs_m', models.TextField()),
                ('verbs_frequency_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('top_20_adjs_f', models.TextField()),
                ('adjs_frequency_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('top_20_adjs_m', models.TextField()),
                ('adjs_frequency_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('specific_keywords', models.TextField()),
                ('spec_frequency_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('spec_frequency_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='Face',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_f', models.PositiveIntegerField()),
                ('screen_m', models.PositiveIntegerField()),
                ('screen_n', models.PositiveIntegerField()),
                ('main_f', models.PositiveIntegerField()),
                ('main_m', models.PositiveIntegerField()),
                ('center_f', models.PositiveIntegerField()),
                ('center_m', models.PositiveIntegerField()),
                ('confidence_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('confidence_m', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='EmoMale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smile_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('smile_conf', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('happy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sad', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('angry', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fear', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calm', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('disgusted', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('surprised', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('confused', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='EmoFemale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smile_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('smile_conf', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('happy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sad', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('angry', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fear', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calm', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('disgusted', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('surprised', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('confused', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='EmoAll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smile', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('smile_conf', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('happy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sad', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('angry', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fear', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calm', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('disgusted', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('surprised', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('confused', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='AgeMale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_age_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('avg_age_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_0', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_15', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_30', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_45', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_60', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_75', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_90', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='AgeGroup30',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perc_img', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('center', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('gender_conf', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('age_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('smile', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('smile_conf', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('happy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sad', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('angry', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fear', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calm', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('disgusted', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('surprised', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('confused', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('pitch', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('roll', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('yaw', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='AgeFemale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_age_f', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('avg_age_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_0', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_15', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_30', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_45', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_60', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_75', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_90', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
        migrations.CreateModel(
            name='AgeAll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_age', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('avg_age_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_0', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_15', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_30', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_45', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_60', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_75', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('a_90', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('video_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.entries')),
            ],
        ),
    ]
